# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/
$ ->
    zoom = 13
    center = ol.proj.fromLonLat([-122.18333, 37.452778])
    #console.log(center)
    rotation = 0
    if window.location.hash != ''
        hash = window.location.hash.replace('#map=', '')
        parts = hash.split('/')
        if  parts.length == 4
            zoom = parseInt(parts[0], 10)
            center = [parseFloat(parts[1]), parseFloat(parts[2])]
            rotation = parseFloat(parts[3])


    map = new ol.Map
        target: 'map'
        layers: [
            new ol.layer.Tile
                source: new ol.source.MapQuest
                    layer: 'osm'
                ]
        view: new ol.View
            #projection: 'EPSG:4326'
            center: ol.proj.fromLonLat([13.31, 52.50])
            zoom: zoom
            center: center
            rotation: rotation

    vectorSource = new ol.source.Vector()
    vectorLayer = new ol.layer.Vector
      source: vectorSource
      style: new ol.style.Style
        stroke: new ol.style.Stroke
            width: 3
            color: color: [0, 153, 255, 1]
    map.addLayer(vectorLayer)

    shouldUpdate = true
    view = map.getView()

    updatePermalink = () ->
        if !shouldUpdate
            shouldUpdate = true
            return

        center = view.getCenter()
        hash = "#map=#{view.getZoom()}/#{Math.round(center[0]*100)/100}/#{Math.round(center[1]*100)/100}/#{view.getRotation()}"

        coords = ol.proj.toLonLat(view.getCenter())
        $.ajax
            type: 'POST'
            url: "#{window.location.protocol}//#{window.location.host}/localwikisearch"
            data:
                coords: "#{coords[1]},#{coords[0]}"
                lang: (window.navigator.userLanguage || window.navigator.language).split('-')[0]
            success: (data, textStatus, jqXHR) ->
                map.getOverlays().getArray().slice().forEach (overlay) ->
                    map.removeOverlay(overlay)
                    
                for wiki_entry in data.data
                    do (wiki_entry) ->
                        center = ol.proj.fromLonLat([wiki_entry.lon, wiki_entry.lat])
                        #console.log(wiki_entry)
                        lang = window.navigator.userLanguage || window.navigator.language
                        lang = lang.split('-')[0]
                        #console.log(lang)
                        url = "http://#{lang}.wikipedia.org/?curid=#{wiki_entry.pageid}"
                        element = $("<div style=\"background-color:rgba(.1, .1, .1, .5);opacity:.6;\"><p style=\"max-width:80px; word-wrap:break-word; line-height:80%; font-size:6pt; \"><a class=\"map-link\" target=\"_new\" href=\"#\" style='' data-lon=\"#{wiki_entry.lon}\" data-lat=\"#{wiki_entry.lat}\" data-pageid=\"#{wiki_entry.pageid}\">#{wiki_entry.title}</a></p></div>")
                        overlay = new ol.Overlay
                            position: center
                            stopEvent: true
                            element: element[0]
                        element.on "click", (e)  ->
                            pageid = e["toElement"]["dataset"]["pageid"]
                            coords = [e["toElement"]["dataset"]["lon"], e["toElement"]["dataset"]["lat"]]
                            #console.log("MAP-LINK-EVENT")
                            #console.log(e)
                            $(document).data('modal_pageid', pageid)
                            $(document).data('modal_coords', "[#{coords[0]}, #{coords[1]}]")
                            #console.log(pageid)
                            #console.log(e)
                            vote(pageid, +5)
                            e.preventDefault()
                            $("#target_suggestion").modal("show")

                        map.addOverlay(overlay)

            fail: (data, textStatus, error) ->
                console.log("Could not find wiki entry for #{coords} #{textStatus}")
            always: (data, text, error) ->
                console.log("Always #{text}")

        state =
            zoom: view.getZoom()
            center: view.getCenter()
            rotation: view.getRotation()
        window.history.pushState(state, 'map', hash)

    map.on 'moveend', updatePermalink

    window.addEventListener 'popstate', (event) ->
        if event.state == null
            return
        map.getView().setCenter(event.state.center)
        map.getView().setZoom(event.state.zoom)
        map.getView().setRotation(event.state.rotation)
        shouldUpdate = false

    $("#center-home").on 'click', (e) ->
        center_navigator = (position) ->
            center = ol.proj.fromLonLat([position.coords.longitude, position.coords.latitude])
            map.getView().setCenter(center)
        navigator.geolocation.getCurrentPosition(center_navigator)

    $("#lookup_form").submit (e) ->
        e.preventDefault()
        $.ajax
            type: 'POST'
            url: "#{window.location.protocol}//#{window.location.host}/localwikilookup"

            data: $("#lookup_form").serialize()

            success : (data) ->
                #console.log("Received #{data}")
                #console.log(data)
                center = [parseFloat(data["lonlat"][0]), parseFloat(data["lonlat"][1])]
                #console.log(data["lonlat"])
                #console.log(center)
                center = ol.proj.fromLonLat(center)
                #console.log("At OL #{center}")
                map.getView().setCenter(center)
                map.getView().setZoom("14")

            fail:
                console.log("Something went wrong!")
    $('#target_suggestion').on 'show.bs.modal', (event) ->
      button = $(event.relatedTarget) #// Button that triggered the modal
      recipient = button.data('whatever') #// Extract info from data-* attributes
      #// If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
      #// Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
      modal = $(@)
      #console.log("LOG SKIP")
      #console.log(modal.data('skip'))
      #console.log(modal.data('skip')?)
      if ! modal.data('skip')?
        modal.data('skip', 0)
      #console.log(modal.data('skip'))
      $(document).data('modal', modal)
      coords = ol.proj.toLonLat(view.getCenter())
      show_spinner(modal.find('.modal-body p'))

      if parseInt($(document).data('modal_pageid')) > 0
        pageid = $(document).data('modal_pageid')
        $(document).removeData('modal_pageid')
        modal.data('pageid', pageid)
      else
        pageid = 0
      $.ajax
          type: 'POST'
          url: "#{window.location.protocol}//#{window.location.host}/localwikisuggest"
          data:
              coords: "#{coords[1]},#{coords[0]}"
              lang: (window.navigator.userLanguage || window.navigator.language).split('-')[0]
              skip: modal.data('skip')
              pageid: pageid
              velocity: $(document).data('velocity')
          success: (data, textStatus, jqXHR) ->
              #$("#load_indicator").remove()
              velocity = $(document).data('velocity')
              $(".velocity").removeClass("btn-primary")
              $("##{velocity}").addClass("btn-primary")
              if data["message"] == 'success'
                  if data["top5"] != null
                      list = $("<ul class='list-group'>")
                      listed_ids = []
                      for top in data["top5"]
                        console.log(top)
                        list_elem = $("<li class='list-group-item'><a class=\"topx_link\" href=\"#\" data-aboveitems=\"[#{listed_ids}]\" data-pageid=\"#{top["pageid"]}\">#{top["title"]}</a></li>")
                        #console.log(listed_ids)
                        list.append(list_elem)
                        #if "ranked_dist" of top
                            #list_elem.append($("<span class='badge'>#{top["ranked_dist"]}</span>"))
                        if "propensity" of top
                            #list_elem.append($("<button type='button' class='btn btn-default' data-toggle='tooltip' data-placement='left' title='Tooltip on right'>#{top["propensity"]}</button>"))
                            list_elem.attr("data-placement", "below")
                            list_elem.attr("title", top["propensity"])
                            #list_elem.attr("title", top["ranked_dist"])
                            list_elem.tooltip()

                        downvote_elem = $("<a href='#' class='.downvote' data-pageid='#{top["pageid"]}' style='float:right'>")
                        downvote_elem.append($("<span class='glyphicon glyphicon-remove-sign' data-pageid='#{top["pageid"]}'>"))
                        downvote_elem.on 'click', (e) ->
                            pageid = e["toElement"]["dataset"]["pageid"]
                            vote(pageid, -1)
                            console.log(e)
                            console.log(pageid)
                            $("#target_suggestion").modal("show")
                            e.preventDefault()
                        list_elem.append(downvote_elem)

                        list_elem.on 'click', (e) ->
                            pageid = e["toElement"]["dataset"]["pageid"]
                            $(document).data('modal_pageid', pageid)
                            coords = [e["toElement"]["dataset"]["lon"], e["toElement"]["dataset"]["lat"]]
                            #console.log("EVENT")
                            #console.log(e)
                            #console.log("TOP")
                            #console.log(top)
                            $(document).data('modal_coords', "[#{top["lon"]}, #{top["lat"]}]")
                            ignored_pageids = eval(e["toElement"]["dataset"]["aboveitems"])
                            vote(pageid, +3)
                            #console.log("Upvoted #{pageid}")

                            #console.log("Skip items")
                            #console.log(ignored_pageids)
                            for ignored_pageid in ignored_pageids
                                vote(ignored_pageid, -1)
                                #console.log("Downvoted #{ignored_pageid}")
                            e.preventDefault()
                            $("#target_suggestion").modal("show")


                        listed_ids.push(top["pageid"])
                      modal.find('.modal-body p').html(list)
                      $(".vote_buttons").hide()


                  else
                      name = data["suggestion"]["title"]
                      summary = data["suggestion"]["summary"]
                      if "dist" of data["suggestion"]
                        distance = ", distance #{data["suggestion"]["dist"]} m"
                      else
                        distance = " "

                      modal.data('pageid', data["suggestion"]["pageid"])
                      #modal.find('.modal-header').html($(".vote_buttons"))
                      modal.find('.modal-body p').html("<span id='modal_images'></span><h4 <em>#{name}</em>#{distance}</h4>
                                                        <p>#{summary}</p>")
                      image_html = ""
                      for image_url in data["image_urls"]
                        if not image_url.endsWith('.svg')
                            image_html += "<img height='120pt' src='#{image_url}'/>"
                      $("#modal_images").html(image_html)
                      $(".vote_buttons").show()
              else
                  modal.find('.modal-body p').html("<p>#{data["message"]}</p>")
                  $(".vote_buttons").hide()

              #console.log(data)
          fail: (data, textStatus, jqXHR) ->
              modal.find('.modal-body p').html("Couldn't load suggestion!" + textStatus)

    $("#reset_suggestions").on 'click', (e) ->
        $.ajax
            type: 'POST'
            url: "#{window.location.protocol}//#{window.location.host}/localwikiresetsuggestions"

    $("#dontcare").on 'click', (e) ->
        modal = $(document).data('modal')
        pageid = modal.data('pageid')
        vote(pageid, -3)
        # ajax call to downvote
        $("#target_suggestion").modal("show")
        #console.log("dontcare #{pageid}")
        #console.log(e)

    $("#morelikethat").on 'click', (e) ->
        modal = $(document).data('modal')
        pageid = modal.data('pageid')
        # ajax call to upvote
        #console.log(modal.data('skip'))
        modal.data('skip', modal.data('skip') + 1)
        #console.log(modal.data('skip'))
        vote(pageid, +1)
        # close suggestion
        # open new suggestion
        $("#target_suggestion").modal("show")
        #console.log("morelikethat #{pageid}")
        #console.log(e)

    $("#like").on 'click', (e) ->
        modal = $(document).data('modal')
        pageid = modal.data('pageid')
        vote(pageid, +2)
        #console.log("like #{pageid}")
        lang = (window.navigator.userLanguage || window.navigator.language).split('-')[0]
        window.open("http://#{lang}.wikipedia.org/?curid=#{pageid}", '_blank')
        #console.log(e)

    $('.velocity').on 'click', (e) ->
        velocity = e["toElement"]["id"]
        console.log($(document).data('velocity'))
        $(document).data('velocity', velocity)
        console.log($(document).data('velocity'))
        $(".velocity").removeClass("btn-primary")
        $("##{velocity}").addClass("btn-primary")
        $("#target_suggestion").modal("show")

    $('#go').on 'click', (e) ->
        modal = $(document).data('modal')
        pageid = modal.data('pageid')
        vote(pageid, +3)
        # ajax call to upvote
        # retrieve directions
        # display directions
        lang = (window.navigator.userLanguage || window.navigator.language).split('-')[0]
        #window.open("http://#{lang}.wikipedia.org/?curid=#{pageid}", '_blank')
        #console.log("go to #{pageid}")
        to_coords = eval($(document).data('modal_coords'))
        from_coords =  ol.proj.toLonLat(view.getCenter())
        #console.log("FROM")
        #console.log(from_coords)
        #console.log("TO")
        #console.log(to_coords)
        $.ajax
            type: 'POST'
            url: "#{window.location.protocol}//#{window.location.host}/localwikiroute"
            data:
                from_coords: from_coords
                to_coords: to_coords
            success: (data, textStatus, jqXHR) ->
                #console.log(data)
                route = new ol.format.Polyline
                            factor: 1e6
                        .readGeometry data["data"]["route_geometry"],
                            dataProjection: 'EPSG:4326'
                            featureProjection: 'EPSG:3857'
                feature = new ol.Feature(route)
                $("#target_suggestion").modal("hide")
                vectorSource.addFeature(feature)
        #console.log(e)

    $('#bookmark').on 'click', (e) ->
        modal = $(document).data('modal')
        pageid = modal.data('pageid')
        vote(pageid, +1)
        # ajax call to upvote
        # retrieve directions
        # display directions
        lang = (window.navigator.userLanguage || window.navigator.language).split('-')[0]
        #window.open("http://#{lang}.wikipedia.org/?curid=#{pageid}", '_blank')
        modal.find('.modal-body p').html("This button will show direction to the place. Not implemented, yet.")
        #console.log("go to #{pageid}")
        #console.log(e)


    show_spinner = (obj) ->
        obj.html("<span id='load_indicator'><img src=\"<%= asset_path('spinner.gif') %>\"></span>")

    vote = (pageid, score) ->
        #console.log("#{pageid} => #{score}")
        $.ajax
            type: 'POST'
            url: "#{window.location.protocol}//#{window.location.host}/localwikivote"
            data:
                pageid: pageid
                score: score
                lang: (window.navigator.userLanguage || window.navigator.language).split('-')[0]

            success: (data, textStatus, jqXHR) ->
                #console.log("Vote LOG")
                #console.log(data)

    $("#center-home").click()
    # keep it around for debugging
    $(document).data('view', view)
    $(document).data('map', map)
